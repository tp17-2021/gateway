name: Gateway Tests

on:
  pull_request:
    branches: [ main, development ]
    types: [ open ]

  push:

  workflow_dispatch:

jobs:
  test-synchronization-service:
    name: Test Synchronization Service
    runs-on: [self-hosted, X64]
    
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Tests Docker-Compose
        run: docker-compose --env-file synchronization-service/test.env up --build --exit-code-from synchronization-service --renew-anon-volumes --remove-orphans

      - name: Clean up containers
        run: docker-compose --env-file synchronization-service/test.env down
  
  test-token-manager:
    name: Test Token Manager
    runs-on: [self-hosted, X64]
    
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Tests Docker-Compose
        run: docker-compose --env-file token-manager/test.env up --build --exit-code-from token-manager --renew-anon-volumes --remove-orphans

      - name: Clean up containers
        run: docker-compose --env-file token-manager/test.env down

  test-voting-process-manager:
    name: Test Voting Process Manager
    runs-on: [self-hosted, X64]
    
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Tests Docker-Compose
        run: docker-compose --env-file voting-process-manager/test.env up --build --exit-code-from voting-process-manager --renew-anon-volumes --remove-orphans

      - name: Clean up containers
        run: docker-compose --env-file voting-process-manager/test.env down

  test-voting-service:
    name: Test Voting Service
    runs-on: [self-hosted, X64]
    
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Tests Docker-Compose
        run: docker-compose --env-file voting-service/test.env up --build --exit-code-from voting-service --renew-anon-volumes --remove-orphans

      - name: Clean up containers
        run: docker-compose --env-file voting-service/test.env down

  build-arm64:
    needs:
      - test-synchronization-service
      - test-token-manager
      - test-voting-service
      - test-voting-process-manager

    name: Build and push arm64 Images
    runs-on: [self-hosted, ARM64]

    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Build images
        run : docker-compose -f compose-files/build-push.arm64.yml build --parallel

      - name: Push images to team's self-hosted registry
        run: docker-compose -f compose-files/build-push.arm64.yml push

  build-x64:
    needs:
      - test-synchronization-service
      - test-token-manager
      - test-voting-service
      - test-voting-process-manager

    name: Build and push x64 Images
    runs-on: [self-hosted, X64]

    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Build images
        run : docker-compose -f compose-files/build-push.x64.yml build --parallel

      - name: Push images to team's self-hosted registry
        run: docker-compose -f compose-files/build-push.x64.yml push

  docker-manifest:
    needs:
      - build-arm64
      - build-x64

    name: Join x64 and arm64 to a single multiarch image
    runs-on: [self-hosted, X64]

    env:
      MICRO_SERVICE: [voting-service, synchronization-service, voting-process-manager, token-manager, token-writer, statevector, web, admin-frontend]

    step:
      - name: Join manifests
      - run: docker manifest create localhost:5000/elecite-g-${{ env.MICRO_SERVICE }} --amend localhost:5000/elecite-g-${{ env.MICRO_SERVICE }}-x64 --amend localhost:5000/elecite-g-${{ env.MICRO_SERVICE }}-arm64

    step:
      - name: Push manifest
      - run: docker manifest push localhost:5000/elecite-g-${{ env.MICRO_SERVICE }}

  stage:
    needs:
      - docker-manifest

    name: Stage on team server  
    runs-on: [self-hosted, X64]
    
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Docker-Compose
        run: docker-compose --env-file compose-files/stage.env up -d --build
